{"version":3,"sources":["../../../../src/components/widgets/text_editors/convertFormats.js"],"names":["getTextBlockRegExp","getLaTeXWrappedRegExp","stripHTMLTags","html","replace","trim","extractTextBlocks","laTeX","matchObj","matchStr","matches","stringifiedLaTeX","JSON","stringify","regExp","exec","push","join","wrapLaTeX","value","wrapText","isLaTeXExpr","test","hasTextExpression","htmlToLaTeX","breakTag","trimmedHTML","split","map","para","length","laTeXToHTML","trimmedLaTeX"],"mappings":"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","sourcesContent":["const getTextBlockRegExp = () => /\\\\text\\{([^}]*)}/g;\n\n/**\n * To match any character including newline whitespace, use `[\\s\\S]*`\n * instead of `.*`. http://stackoverflow.com/a/1068308\n *\n * @returns {RegExp} the regular expression\n */\nconst getLaTeXWrappedRegExp = () => /^\\$[\\s\\S]*\\$$/;\n\nconst stripHTMLTags = (html) => html.replace(/<[^>]*>/g, '').trim();\n\nconst extractTextBlocks = (laTeX) => {\n  let matchObj;\n  let matchStr;\n  const matches = [];\n\n  // Need to stringify to match literally on `\\t`.\n  const stringifiedLaTeX = JSON.stringify(laTeX);\n  const regExp = getTextBlockRegExp();\n\n  /**\n   * Find multiple matches with the ``//g` flag.\n   * The `RegExp.prototype.exec` API mutates the RegExp object.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#Finding_successive_matches\n   */\n  while ((matchObj = regExp.exec(stringifiedLaTeX)) !== null) {\n    matchStr = matchObj[1].trim().replace('\\\\n', '');\n    matches.push(matchStr);\n  }\n\n  return matches.join('<br>');\n};\n\nconst wrapLaTeX = (value) => (value ? `$${value}$` : '$$');\n\nconst wrapText = (value) => (value ? `\\\\text{${value}}` : '\\\\text{}');\n\n// Exports\n// -------\n\nexport const isLaTeXExpr = (value) => getLaTeXWrappedRegExp().test(value);\n\nexport const hasTextExpression = (laTeX) => {\n  const regExp = getTextBlockRegExp();\n  const stringifiedLaTeX = JSON.stringify(laTeX);\n\n  return regExp.test(stringifiedLaTeX);\n};\n\nexport const htmlToLaTeX = (html) => {\n  const breakTag = '<br>';\n  const trimmedHTML = html.trim();\n\n  // Handle empty input\n  if (trimmedHTML === '') {\n    return wrapLaTeX(wrapText());\n  }\n\n  // Handle input with only linebreaks\n  if (trimmedHTML.replace(breakTag, '') === '') {\n    return wrapLaTeX(wrapText());\n  }\n\n  return wrapLaTeX(\n    trimmedHTML\n      .split(breakTag)\n\n      // Ignore empty linebreaks\n      .map((para) => (para.length ? wrapText(stripHTMLTags(para)) : ''))\n      .join('\\n')\n  );\n};\n\nexport const laTeXToHTML = (laTeX) => {\n  const trimmedLaTeX = laTeX.trim();\n\n  return extractTextBlocks(trimmedLaTeX);\n};\n"],"file":"convertFormats.js"}