{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","Custom","onChangeComplete","props","Component","propTypes","PropTypes","object","func","CustomColorPicker","ColorPicker","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","_a","_r","_g","_b","swatchStyle","backgroundColor","isRequired","string"],"mappings":"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","sourcesContent":["import Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport {Hue, Saturation} from 'react-color/lib/components/common';\nimport {CustomPicker as customPicker} from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = (c) => c.rgb || c;\nconst getColorSource = (c) => (c.source === 'hex' ? c.hex : extractRGB(c));\nconst toTinyColor = (c) => tinycolor(getColorSource(c));\n\nclass Custom extends Component {\n  render() {\n    const {onChangeComplete} = this.props;\n\n    return (\n      <div className=\"colorpicker__outer\">\n        <div className=\"colorpicker__controls +flex\">\n          <div className=\"colorpicker__sliders\">\n            <div className=\"colorpicker__slider\">\n              <Hue {...this.props} />\n            </div>\n          </div>\n        </div>\n        <div className=\"colorpicker__saturation\">\n          <Saturation {...this.props} />\n        </div>\n        <div className=\"colorpicker__custom-input\">\n          <Fields {...this.props} onChange={onChangeComplete} />\n        </div>\n      </div>\n    );\n  }\n}\n\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func,\n};\n\nconst CustomColorPicker = customPicker(Custom);\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({isVisible: !this.state.isVisible});\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n\n    // Convert rgba to rgb if necessary\n    const rgbString =\n      selectedColor._a !== 0\n        ? selectedColor.toRgbString()\n        : `rgb(${selectedColor._r},${selectedColor._g},${selectedColor._b})`;\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = {backgroundColor: rgbString};\n\n    return (\n      <>\n        <div className=\"colorpicker__container\">\n          <div className=\"colorpicker\">\n            <div\n              className=\"colorpicker__swatch +cursor-clickable\"\n              style={swatchStyle}\n              onClick={this.toggleVisible}\n            />\n          </div>\n\n          <div className=\"colorpicker__selected-color +hover-grey\" onClick={this.toggleVisible}>\n            {colorText}\n          </div>\n        </div>\n\n        {this.state.isVisible && (\n          <CustomColorPicker color={rgbString} onChangeComplete={this.onSelectedColorChange} />\n        )}\n      </>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nexport default ColorPicker;\n"],"file":"ColorPicker.js"}