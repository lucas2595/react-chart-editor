{"version":3,"sources":["../../../src/components/widgets/Dropzone.js"],"names":["Dropzone","props","context","state","content","validFiletypes","image","geojson","onDrop","bind","parsingError","renderSuccess","value","_","localize","fileType","backgroundImage","features","length","setState","split","join","supportedFileTypes","e","payload","target","result","parsedValue","JSON","parse","onUpdate","error","console","warn","accepted","rejected","reader","FileReader","onload","onLoad","readAsDataURL","readAsText","getRootProps","getInputProps","Component","propTypes","PropTypes","string","isRequired","func","any","contextTypes"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Drop from 'react-dropzone';\n\nclass Dropzone extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      content: '',\n    };\n\n    this.validFiletypes = {\n      image: 'image/jpeg, image/jpg, image/svg, image/png, image/gif, image/bmp, image/webp',\n      geojson: 'application/json',\n    };\n\n    this.onDrop = this.onDrop.bind(this);\n    this.parsingError = this.parsingError.bind(this);\n    this.renderSuccess = this.renderSuccess.bind(this);\n  }\n\n  renderSuccess(value) {\n    const _ = this.context.localize;\n\n    if (this.props.fileType === 'image') {\n      return (\n        <div className=\"dropzone-container__image\" style={{backgroundImage: `url(${value})`}} />\n      );\n    }\n    if (this.props.fileType === 'geojson') {\n      return (\n        <div className=\"dropzone-container__message\">\n          <p>{_('GeoJSON loaded!')}</p>\n          <p>{value.features.length + _(' features detected.')}</p>\n        </div>\n      );\n    }\n\n    return <div className=\"dropzone-container__message\">{_('File loaded!')}</div>;\n  }\n\n  UNSAFE_componentWillMount() {\n    const _ = this.context.localize;\n\n    if (this.props.value && this.props.value !== '') {\n      this.setState({content: this.renderSuccess(this.props.value)});\n      return;\n    }\n\n    this.setState({\n      content: (\n        <div className=\"dropzone-container__message\">\n          <p>\n            {_('Drop the ') +\n              this.props.fileType +\n              _(' to upload here or click to choose a file from your computer.')}\n          </p>\n\n          {this.validFiletypes[this.props.fileType] ? (\n            <p>\n              {_('Supported formats are: ') +\n                this.validFiletypes[this.props.fileType].split('image/').join('') +\n                '.'}\n            </p>\n          ) : null}\n        </div>\n      ),\n    });\n  }\n\n  parsingError() {\n    const _ = this.context.localize;\n    const supportedFileTypes =\n      this.props.fileType === 'image'\n        ? this.validFiletypes[this.props.fileType].split('image/').join('')\n        : this.validFiletypes[this.props.fileType];\n\n    return (\n      <div className=\"dropzone-container__message\">\n        {_(\"Yikes! This doesn't look like a valid \") + this.props.fileType}\n        <p>{_('Try again with a supported file format: ') + supportedFileTypes + '.'}</p>\n      </div>\n    );\n  }\n\n  onLoad(e) {\n    try {\n      const payload = e.target.result;\n      const parsedValue = this.props.fileType === 'image' ? payload : JSON.parse(payload);\n      this.props.onUpdate(parsedValue);\n      this.setState({\n        content: this.renderSuccess(parsedValue),\n      });\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      this.setState({\n        content: this.parsingError(),\n      });\n    }\n  }\n\n  onDrop(accepted, rejected) {\n    const _ = this.context.localize;\n    const reader = new FileReader();\n\n    if (accepted.length) {\n      if (accepted.length > 1) {\n        this.setState({\n          content: (\n            <div className=\"dropzone-container__message\">\n              <p>{_('Yikes! You can only upload one file at a time.')}</p>\n            </div>\n          ),\n        });\n        return;\n      }\n      this.setState({content: _('Loading...')});\n      reader.onload = (e) => this.onLoad(e);\n      if (this.props.fileType === 'image') {\n        reader.readAsDataURL(accepted[0]);\n      } else if (this.props.fileType === 'geojson') {\n        reader.readAsText(accepted[0]);\n      }\n    }\n\n    if (rejected.length) {\n      this.setState({\n        content: this.parsingError(),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Drop\n        accept={this.validFiletypes[this.props.fileType]}\n        onDrop={this.onDrop}\n        activeClassName=\"dropzone-container--active\"\n        rejectClassName=\"dropzone-container--rejected\"\n      >\n        {({getRootProps, getInputProps}) => (\n          <div {...getRootProps()} className=\"dropzone-container\">\n            <input {...getInputProps()} />\n            <div className=\"dropzone-container__content\">{this.state.content}</div>\n          </div>\n        )}\n      </Drop>\n    );\n  }\n}\n\nDropzone.propTypes = {\n  fileType: PropTypes.string.isRequired,\n  onUpdate: PropTypes.func,\n  value: PropTypes.any,\n};\n\nDropzone.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default Dropzone;\n"],"file":"Dropzone.js"}